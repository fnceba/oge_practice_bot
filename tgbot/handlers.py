

import random
from django.db.models.fields import BLANK_CHOICE_DASH
from telegram.ext.callbackcontext import CallbackContext
from telegram.update import Update
from telegram import ParseMode
from tgbot.utils import get_quadratic_func_plot, send_rand_parabola_and_save_answer

from user import models# Answer, User


def start(update: Update, context: CallbackContext):
    models.User.objects.get_or_create(tg_id=update.effective_chat.id)
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –Ω–∞—É—á–∏—à—å—Å—è –ø–æ–Ω–∏–º–∞—Ç—å –∑–Ω–∞–∫–∏ –∫–æ—ç—Ñ—Ñ–µ—Ü–∏–µ–Ω—Ç–æ–≤ –ø–∞—Ä–∞–±–æ–ª—ã. –Ø —Ç–µ–±–µ –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–∞—Ä–∞–±–æ–ª—É, –∞ —Ç—ã –º–Ω–µ - –æ—Ç–≤–µ—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–æ—Ç –ø–∞—Ä–∞–±–æ–ª–∞:')
    update.message.reply_photo(get_quadratic_func_plot(1,-2,3, set = {'title':r'$x^{2}-2x+3$'}))
    update.message.reply_text('–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ —è –æ–∂–∏–¥–∞—é –æ—Ç —Ç–µ–±—è —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç:')
    update.message.reply_text('<b>+-+</b>', parse_mode=ParseMode.HTML)
    update.message.reply_text('–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤—å /skip')
    update.message.reply_text('–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º:')
    send_rand_parabola_and_save_answer(update, context)

def enter_answer(update: Update, context: CallbackContext):
    blank_answer: models.Answer = models.Answer.objects.get(user__tg_id = update.effective_chat.id, answer=None)
    blank_answer.answer = update.message.text
    blank_answer.save()
    print(repr(blank_answer.right_answer))
    if blank_answer.right_answer == update.message.text:
        update.message.reply_text('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –ø—Ä–∞–≤–∏–ª—å–Ω–æ!')
        update.message.reply_text(random.choice('ü•≥üéáüéÜüéâ'))
        send_rand_parabola_and_save_answer(update, context)
    else:
        update.message.reply_text('–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ /skip')
        blank_answer.pk=None
        blank_answer.answer=None
        blank_answer.save()

def skip(update: Update, context: CallbackContext):
    send_rand_parabola_and_save_answer(update, context)
    





